---
- name: Acceso, Autenticacion y Autorizacion
  hosts: all
  become: true
  gather_facts: yes

  tasks:
    - name: 5.1.1. Verificar que el demonio cron está habilitado
      block: 
        - name: 5.1.1. Verificar estado del servicio crond
          ansible.builtin.command: systemctl is-enabled crond
          register: crond_status
          ignore_errors: yes

        - name: 5.1.1. Habilitar crond si no está habilitado
          ansible.builtin.command: systemctl --now enable crond

    - name: 5.1.2. Verificar que los permisos en /etc/crontab están configurados
      block:
        - name: 5.1.2 Verificar los permisos de /etc/crontab
          ansible.builtin.stat:
            path: /etc/crontab
          register: crontab_stat

        - name: 5.1.2 Corregir permisos si es necesario
          ansible.builtin.shell: | 
            chown root:root /etc/crontab
            chmod og-rwx /etc/crontab
          when: crontab_stat.stat.mode != "0600"

        - name: 5.1.2 Verificar los permisos de /etc/cron.d
          ansible.builtin.stat:
            path: /etc/cron.d
          register: crond_stat

        - name: 5.1.2 Corregir permisos de /etc/cron.d si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.d
            chmod og-rwx /etc/cron.d
          when: crond_stat.stat.mode != "0600"


    - name: 5.1.3. Verificar que los permisos en /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly y /etc/cron.monthly están configurados
      block:
        - name: 5.1.3 Verificar permisos en /etc/cron.hourly
          ansible.builtin.command: "ls -ltrha /etc/cron.hourly | awk '{print $1}'"
          register: crontab_hourly_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.hourly si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.hourly
            chmod og-rwx /etc/cron.hourly
          when: crontab_hourly_search.stdout != "-rw-------"

        - name: 5.1.3 Verificar permisos en /etc/cron.daily
          ansible.builtin.command: "ls -ltrha /etc/cron.daily | awk '{print $1}'"
          register: crontab_daily_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.daily si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.daily
            chmod og-rwx /etc/cron.daily
          when: crontab_daily_search.stdout != "-rw-------"

        - name: 5.1.3 Verificar permisos en /etc/cron.weekly
          ansible.builtin.command: "ls -ltrha /etc/cron.weekly | awk '{print $1}'"
          register: crontab_weekly_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.weekly si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.weekly
            chmod og-rwx /etc/cron.weekly
          when: crontab_weekly_search.stdout != "-rw-------"

        - name: 5.1.3 Verificar permisos en /etc/cron.monthly
          ansible.builtin.command: "ls -ltrha /etc/cron.monthly | awk '{print $1}'"
          register: crontab_monthly_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.monthly si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.monthly
            chmod og-rwx /etc/cron.monthly
          when: crontab_monthly_search.stdout != "-rw-------"

    - name: 5.1.5. Verificar que at/cron está restringido a usuarios autorizados
      block:
      - name: 5.1.5 Eliminar at.deny y cron.deny si existen
        ansible.builtin.file:
          path: "{{ item }}"
          state: absent
        loop:
          - /etc/cron.deny
          - /etc/at.deny

      - name: 5.1.5 Crear at.deny y cron.deny
        ansible.builtin.file:
          path: "{{ item }}"
          state: touch
        loop:
          - /etc/cron.allow
          - /etc/at.allow

      - name: 5.1.5 Asignar permisos a at.deny y cron.deny
        ansible.builtin.file:
          path: "{{ item }}"
          owner: root
          group: root
          mode: "0600"
        loop:
          - /etc/cron.allow
          - /etc/at.allow

    - name: 5.2.1. Verificar que los permisos en /etc/ssh/sshd_config están configurados
      block:
        - name: 5.2.1. Verificar que los permisos en /etc/ssh/sshd_config están configurados
          ansible.builtin.shell:
            cmd: "stat -c %a /etc/ssh/sshd_config"
          register: sshd_config_stat

        - name: 5.2.1. Corregir permisos en /etc/ssh/sshd_config si es necesario
          ansible.builtin.file:
            path: /etc/ssh/sshd_config
            owner: root
            group: root
            mode: '0600'
          when: sshd_config_stat.stdout != '0600'
    
    #- name: 5.2.1.1. Verificar que el acceso SSH está limitado
    #Se aplicó de forma manual

    - name: 5.2.3. Verificar que el SSH MaxAuthTries está configurado con el valor igual o menor que cuatro
      block:
        - name: 5.2.3. Buscar MaxAuthTries en sshd_config
          ansible.builtin.shell: grep "MaxAuthTries" /etc/ssh/sshd_config
          register: maxauthtries_stat
          ignore_errors: true

        - name: 5.2.3. Configurar MaxAuthTries en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#MaxAuthTries 6/MaxAuthTries 4/g' /etc/ssh/sshd_config
          when: maxauthtries_stat.stdout == "#MaxAuthTries 6"
            
    - name: 5.2.4. Verificar que el SSH IgnoreRhosts está habilitado
      block:
        - name: 5.2.4. Buscar IgnoreRhosts en sshd_config
          ansible.builtin.shell: grep "#IgnoreRhosts" /etc/ssh/sshd_config
          register: ignorerhosts_stat
          ignore_errors: true

        - name: 5.2.4. Habilitar IgnoreRhosts en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#IgnoreRhosts yes/IgnoreRhosts yes/g' /etc/ssh/sshd_config
          when: ignorerhosts_stat.stdout == "#IgnoreRhosts yes"

    - name: 5.2.5. Verificar que el SSH HostbasedAuthentication está deshabilitado
      block:
        - name: 5.2.5. Buscar HostbasedAuthentication en sshd_config
          ansible.builtin.shell: grep "#HostbasedAuthentication" /etc/ssh/sshd_config
          register: hostbased_stat
          ignore_errors: true

        - name: 5.2.5. Deshabilitar HostbasedAuthentication en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#HostbasedAuthentication no/HostbasedAuthentication no/g' /etc/ssh/sshd_config
          when: hostbased_stat.stdout == "#HostbasedAuthentication no"

    #- name: 5.2.6. Verificar que el login con usuario root en SSH está deshabilitado
    #Se aplicó de forma manual
    
    - name: 5.2.7. Verificar que el SSH PermitEmptyPasswords está deshabilitado
      block:
        - name: 5.2.7 Obtener estado del SSH PermitEmptyPasswords
          ansible.builtin.shell: grep "#PermitEmptyPasswords" /etc/ssh/sshd_config
          register: permitemptypasswords_stat
          ignore_errors: true

        - name: 5.2.7 Deshabilitar PermitEmptyPasswords en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/g' /etc/ssh/sshd_config
          when: permitemptypasswords_stat.stdout == "#PermitEmptyPasswords no" 

    - name: 5.2.8. Verificar que el SSH PermitUserEnviroment está deshabilitado
      block:
        - name: 5.2.8. Configurar PermitUserEnvironment en sshd_config
          ansible.builtin.shell: grep "#PermitUserEnvironment no" /etc/ssh/sshd_config
          register: permituserenvironment_stat
          ignore_errors: true

        - name: 5.2.8 Deshabilitar  PermitUserEnvironment en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#PermitUserEnvironment no/PermitUserEnvironment no/g' /etc/ssh/sshd_config
          when: permituserenvironment_stat.stdout == "#PermitUserEnvironment no"

    - name: 5.2.9. Verificar que el intervalo de tiempo de inactividad de SSH está configurado
      block:
        - name: 5.2.9. Configurar ClientAliveInterval en sshd_config
          ansible.builtin.shell: grep "#ClientAliveInterval" /etc/ssh/sshd_config
          register: clientaliveinterval_stat
          ignore_errors: true
          
        - name: 5.2.9. Configurar ClientAliveCountMax en sshd_config
          ansible.builtin.shell: grep "#ClientAliveCountMax" /etc/ssh/sshd_config
          register: clientalivecountmax_stat
          ignore_errors: true

        - name: 5.2.9 Configurar ClientAliveInterval en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 300/g' /etc/ssh/sshd_config
          when: clientaliveinterval_stat.stdout == "#ClientAliveInterval 0"
    
        - name: 5.2.9 Configurar ClientAliveCountMax en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 0/g' /etc/ssh/sshd_config
          when: clientalivecountmax_stat.stdout == "#ClientAliveCountMax 3"

    - name: 5.2.10. Verificar que LoginGraceTime está configurado a un minuto o menos
      block:
        - name: 5.2.10. Configurar LoginGraceTime en sshd_config
          ansible.builtin.shell: grep "#LoginGraceTime" /etc/ssh/sshd_config
          register: logingracetime_stat
          ignore_errors: true

        - name: 5.2.10 LoginGraceTime en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#LoginGraceTime 2m/LoginGraceTime 60/g' /etc/ssh/sshd_config
          when: logingracetime_stat.stdout == "#LoginGraceTime 2m"

    - name: 5.2.11. Verificar que el banner de advertencia de SSH está configurado
      block:
        - name: 5.2.11. Configurar banner_stat en sshd_config
          ansible.builtin.shell: grep "#Banner" /etc/ssh/sshd_config
          register: banner_stat
          ignore_errors: true

        - name: 5.2.11. Banner_stat en sshd_config
          ansible.builtin.shell: |
            sed -i 's|#Banner none|Banner /etc/issue.net|g' /etc/ssh/sshd_config
          when: banner_stat.stdout == "#Banner none"
    
    - name: 5.2.12. Verificar que SSH PAM este habilitado
      block:
        - name: 5.2.12. Configurar usepam_stat en sshd_config
          ansible.builtin.shell: grep "#UsePAM" /etc/ssh/sshd_config
          register: usepam_stat
          ignore_errors: true

        - name: 5.2.12. Usepam_stat en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#UsePAM no/UsePAM yes/g' /etc/ssh/sshd_config
          when: usepam_stat.stdout == "#UsePAM no"

    - name: 5.2.13. Verificar que SSH AllowTcpForwarding está deshabilitado #Sale como 5.2.17 en el scan
      block:
        - name: 5.2.13. Configurar AllowTcpForwarding en sshd_config
          ansible.builtin.shell: grep "#AllowTcpForwarding" /etc/ssh/sshd_config
          register: allowtcpforwarding_stat
          ignore_errors: true

        - name: 5.2.13. AllowTcpForwarding en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#AllowTcpForwarding yes/AllowTcpForwarding no/g' /etc/ssh/sshd_config
          when: allowtcpforwarding_stat.stdout == "#AllowTcpForwarding yes"

    - name: 5.2.14. Verificar que SSH MaxStartups esta configurada
      block:
        - name: 5.2.14. Configurar MaxStartups en sshd_config
          ansible.builtin.shell: grep "#MaxStartups" /etc/ssh/sshd_config
          register: maxstartups_stat
          ignore_errors: true

        - name: 5.2.14. MaxStartups en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#MaxStartups 10:30:100/MaxStartups 10:30:100/g' /etc/ssh/sshd_config
          when: maxstartups_stat.stdout == "#MaxStartups 10:30:100"
          
    - name: 5.2.15. Verificar que SSH MaxSessions esta configurado a 4 o menos
      block:
        - name: 5.2.15. Configurar MaxSessions en sshd_config
          ansible.builtin.shell: grep "#MaxSessions" /etc/ssh/sshd_config
          register: maxsessions_stat
          ignore_errors: true

        - name: 5.2.15. MaxSessions en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#MaxSessions 10/MaxSessions 10/g' /etc/ssh/sshd_config
          when: maxsessions_stat.stdout == "#MaxSessions 10"

    #- name: 5.3.3. Verificar que authselect incluya with-faillock
    #Se aplicó de forma manual
    
    - name: 5.4.0 Realizar respaldo /etc/pam.d/password-auth /etc/pam.d/system-auth /etc/security/pwquality.conf
      block:
        - name: Verificar si la cadena de control 5.4.1 existe
          ansible.builtin.shell:
            cmd: "grep -q '# Control 5.4.1' {{ item.src }}"
          loop:
            - { src: "/etc/pam.d/common-password" }
            - { src: "/etc/pam.d/su" }
            - { src: "/etc/ntp.conf" }
          register: grep_result
          ignore_errors: true

        - name: 5.4.0 Realizar respaldo /etc/pam.d/password-auth /etc/pam.d/system-auth /etc/security/pwquality.conf
          ansible.builtin.shell:
            cmd: "cp -rp {{ item.src }} {{ item.dest }}"
          loop:
            - { src: "/etc/pam.d/common-password", dest: "/etc/pam.d/common-password-back" }
            - { src: "/etc/pam.d/su", dest: "/etc/pam.d/su-back" }
            - { src: "/etc/ntp.conf", dest: "/etc/ntp.conf-back" }
          when: not grep_result.results | selectattr('rc', 'defined') | map(attribute='rc') | list | sum > 0

##################################################################################################################
            
#############################################################################################################          

        - name: configuracion de sudoers
          ansible.builtin.shell: |
            echo "Generando BackUp de archivo 'sudoers' "
            cp /etc/sudoers /etc/sudoers.back
            echo "BackUp generado"

            echo "# " >> /etc/sudoers
            echo "#######################################################" >> /etc/sudoers
            echo "# Sudoers de privilegios para usuarios BDV #" >> /etc/sudoers
            echo "# " >> /etc/sudoers
            echo "# Gerencia Perimetros y Controles -  Seguridad" >> /etc/sudoers
            echo "%seguridad ALL=(ALL:ALL) ALL, !/usr/sbin/visudo, !/usr/bin/passwd root" >> /etc/sudoers
            echo "# " >> /etc/sudoers
            echo "# Gerencia Administracion de Accesos" >> /etc/sudoers 
            echo "%accesos ALL=(ALL:ALL) ALL" >> /etc/sudoers
            echo "# " >> /etc/sudoers
            echo "# Gerencia Soporte Unix"  >> /etc/sudoers
            echo "%soporte ALL=(ALL:ALL) ALL, !/usr/sbin/visudo, !/usr/bin/passwd root" >> /etc/sudoers
            echo "#" >> /etc/sudoers

#############################################################################################################   

        - name: configuracion de sudoers
          ansible.builtin.shell: |
            sed -i 's/X11Forwarding yes/X11Forwarding no/' /etc/ssh/sshd_config
            sed -i 's/#AllowTcpForwarding yes/#AllowTcpForwardin no/' /etc/ssh/sshd_config
            sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/' /etc/ssh/sshd_config
            sed -i 's/#PermitUserEnvironment no/PermitUserEnvironment no/' /etc/ssh/sshd_config
            sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 300/' /etc/ssh/sshd_config
            sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 3/' /etc/ssh/sshd_config
            sed -i 's/#LoginGraceTime 2m/LoginGraceTime 60/' /etc/ssh/sshd_config
            sed -i 's/#MaxStartups 10:30:100/MaxStartups 10:30:60/' /etc/ssh/sshd_config
            sed -i 's/#LogLevel INFO/LogLevel INFO/' /etc/ssh/sshd_config
            sed -i 's/#MaxAuthTries 6/MaxAuthTries 4/' /etc/ssh/sshd_config
            sed -i 's/#HostbasedAuthentication no/HostbasedAuthentication no/' /etc/ssh/sshd_config
            echo "Banner /etc/issue.net" >> /etc/ssh/sshd_config
            echo "KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256" >> /etc/ssh/sshd_config
            echo "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256" >> /etc/ssh/sshd_config
            echo "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr" >> /etc/ssh/sshd_config
            chown root:root /etc/ssh/sshd_config
            chmod og-rwx /etc/ssh/sshd_config
            chown root:root /boot/grub/grub.cfg
            chmod u-wx,go-rwx /boot/grub/grub.cfg
            chown -R root:root /var/log
            chmod -R 0640 /var/log/
            echo "umask 027" >> /etc/bash.bashrc
            sed -i 's/#ForwardToSyslog=yes/ForwardToSyslog=yes/' /etc/systemd/journald.conf
            sed -i 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS 28/g' /etc/login.defs
            sed -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS 1/g' /etc/login.defs
            sed -i 's/^PASS_WARN_DAYS.*/PASS_WARN_DAYS 7/g' /etc/login.defs
            sed -i 's/USERGROUPS_ENAB yes/USERGROUPS_ENAB no/' /etc/login.defs
            sed -i 's/^UMASK.*$/UMASK           027/g' /etc/login.defs
            sed '/#Banner none/ a Banner /etc/issue' -i /etc/ssh/sshd_config
            chown root:root /etc/motd
            chown root:root /etc/issue
            chown root:root /etc/issue.net
            systemctl restart sshd